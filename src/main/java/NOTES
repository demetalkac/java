INTERVIEW
-package day03_scanner;- IfStatement02 = Example 1: Type code to print "Weekday" for the weekday names, "weekend day" for the weekend days
                                                Monday - Friday ==> Weekday       Saturday, sunday ==> Weekend day

-package day05ternarystringmainpulation; ->public class NestedTernary01 { "leap year"

-  package day08stringmanipulationloops; -> public class StringManipulations01 { "Example 2: Swap the integers"





*       How do we get the data from the user?
       -1.Adım: Scanner classından object olustur
       -2. Adım: Kullanıcıya ne yapacagını söyle
       -3.Adım: Kullanıcıdan alınan datayı bir variable’ın icine koyun

       1.Step: Create an "object" from "Scanner Class".

       Class Name     Object Name    Assignment Operator    new Keyword     Constructor==>Class Name +()
        Scanner        input             =                    new               Scanner(System.in);
                       scan



1-)         Wrapper classes are "Non-Primitive data types.(Primitive data typeları non-primitive'e cevirir)

            Primitive      Wrapper Class
            byte             Byte
            short           Short
            int            Integer
            long            Long
            float          Float
            double        Double
            boolean       Boolean
            char          Character

            int i= 12; //there is no method, just value
            Integer k= 12; //there are many methods in the coding

            char c= 'A';
            Character d= 'A';

* Autoboxing: To convert "primitive data" to "wrapper class" data type.

            byte b= 23; //close to add any actions/methods
            Byte wb= b;  //is open to addition of the methods

* Unboxing: To convert "wrapper class" to its "primitive data"

            Short ws= 34; //open to be added the methods
            short s= ws;   //container is closed to add methods

* How to get the minimum and maximum values of numeric types in java

            System.out.println(Integer.MAX_VALUE); //

2-)  SWİTCH
   Note: "break" keyword is used in "switch" statement to stop next case executions.
         "break" keyword takes us to the outside the switch statement

  note: Inside the switch parenthesis, you can use just, "int", "byte", short ,char String data types
  note: boolean, long, float, double cannot be used in switch statement


3)            TERNARY
  "ternary" does the same with "if else" by using more simple syntax

  ÖRNEK:If an integer is positive print "The integer is positive" otherwise print "The integer is not positive"
         int i = 12;
          Condition     ?       Will be selected for true condition      :    Will be selected for false condition
          String result = i>0         ?           "The integer is positive"            :        "The integer is not positive";
          System.out.println(result);

NOT: Ternary farklı data tiplerinde sonuc return ederse sonucun data tip,ini "Object" yapınız.
  örn:  int a = 12, b = -10;
        Object res = a>0 && b>0 ? a*b : "I do not how to multiply";
        System.out.println(res);

 NestedTernary: int year= 1600;
                String isLeap = year%100==0 ? (year%400==0 ? "Leap" : "Not leap") : (year%4==0 ? "Leap" : "Not leap"  );
                System.out.println(isLeap);


4-)  SEMBOLLER

*    Note:  % (modulus operator) ==> gives the remainder of a division operation.
              " % " is called "modulus"  operator

*     Note: "!" in java means "not"
             !true ==> false   !false ==> true  !!true ==>true
               "!=" means "does not equal to"

*    Note: In java "==" means equals.
      Note:  in java "=" is assignment operator.
      Note: To compare Strings use "equals()" , do not use "==



*      "||" this sign means "OR" operator in Java.
      equalsIgnoreCase()==>java does not care about the upper or lower case

             Note: " OR" operator in java ==> ||
                    "||" can be used just with booleans

              To get false from  "||" operator everything should be false.
              just a single "true" makes the result true.==>|| is optimistic
              To get "false" from || every condition should be false
              true || true ==> true
              true || false ==> true
              false || true ==> true
              false || false ==> false

*         && (and) islemi sadece "boolean" ile kullanılır.
             && (and) islemi mükemmelliyetcidir, true sonucunu alabilmek icin hersey true olmalıdır.
             Bi tane false varsa sonuc false olur.

            true && true ==> true
            true && false ==> false
            false && true ==> false
            false && false ==> false

NOT: "and" ve "or" bir arada kullanınca karısıklık olmaması icin parantez ile kullanmak daha iyidir:
     (e>0 && f>0) || (e<0 && f<0)


5)  MATEMATİKSEL İSLEMLER:

  * absolute(mutlak deger): //For positive numbers and zero absolute value is the same with the number(sayı pozitif ve  sıfır ise mutlak deger kendileridr)
                        //For negative numbers to find absolute value multiply the number by -1 (negatif sayıların mutlak degeri -1 ile carpılmıs halidir)

  * n =Math.abs(n); //abs() methodu negatif sayıyı pozitif sayıya cevirir. Ve "Math" classından cagılır.

  * a rectangle area==> width*length= area

  * diktörtgenin alanı => kısaKenar*uzunKenar

  * diktörtgenin cevresi => 2*kısaKenar + 2*uzunKenar

  * a rectangular prism then calculate the total area:formula=  2*w*l +  2*h*l  +  2*w*h

  * dairenin alanı => 3,14*r*r  veya  (314*r*r/100) seklinde de yazabiliriz.  --- r: yarıcap

  *ücgenin cevre uzunlugu => a+b+c




  *cemberin cevresi => 2*3,24*r veya  2*314*r/100

  * '%': firstNum * secondNum/100

6-)NOT: char variable'ları matematiksel islemlerde kullanırsanız, Java onların ASCII degerlerini kullanır

   not: Java'da "+" sembolunun 2 anlamı var: 1- Toplama islemi    2- Birlestirme islemi(concatenation)

   next() : Kullanıcıdan String olarak girilen datayı(İLK KELİMEYİ) alır.
   nextLine(): Kullanıcıdan String olarak girilen dataları(STRİNGİN TAMAMINI) alır.

   toLowerCase() methodu bir String deki tum karakterleri kücük harfe cevirir.

   length() :Kac tane karakter oldugunu verir

   charAt(0) : ilk karakteri almada kullanırız



7-)     binarySearch() method -Array de kullanıyoruz.
                // binarySearch() methodunu kullanmadan önce mutlaka "Arrays.sort()" methodunu kullanmalıyız.
                // binarySearch() bize bir elementin arrayde olup olmadıgını verir. Eger element arrayde varsa o elementin indexini verir.
                // binarySearch() methodu tekrarlayan elementler icin kullanılmaz( iki tane 22 varsa bazen 1.yi bazen 2. 22'i verir, o nedenle kullanılmaz)
                //      i)If the element exists binarySearch() method returns the index of the element

          //Example 1: Type code to check if a specific element exists in an Array or not
                String str[] = {"Ali", "Tom", "Carl", "Angie"};


                Arrays.sort(str);//["Ali", "Angie", "Carl", "Tom"]

                int idx = Arrays.binarySearch(str, "Carl"); // 2 parametre ile calısır: 1.arrayın adı, 2.aradıgımız element
                System.out.println(idx);//If the index is zero or more, it means the element exists

                int idxMiami = Arrays.binarySearch(str, "Miami");
                System.out.println(idxMiami);   //  -4 ==>  "-" means does not exist. ("-" elementin arrayde olmadıgını, "rakam(4)" ise olsaydı kacıncı sırada oldugunu gösterir. sırayıda sort kullandıgımız icin ona göre sıraya sokar)
    //          "4" means if it exists it would be 4th element



8-) ARRAY NASIL YAZDIRILIR?
              String dateArray[]= date.split("/");
              System.out.println(Arrays.toString(dateArray));


9-) MULTIDIMENSIONAL ARRAY NASIL YAZDIRILIR?
              String brr[][]={ {"Tom","Jim"},{"Angie"},{"Carl", "Christ","Ali"} };

              System.out.println(Arrays.deepToString(brr)); //[[Tom, Jim], [Angie], [Carl, Christ, Ali]]

11-) Array veya Collection varsa "for-each-loop" kullanmak ilk tercihiniz olsun
     Array veya Collection var ama "index" kullanmak zorundasınız o zaman "for-each-loop" calısmaz, "for-loop"  ,
     "while-loop" veya "do-while-loop" kullanmalısınız.


12-) ARRAYLIST
             //When you create an Array, you have to declare the length of the Array.
             //But when you use "Lists" no need to declare the number of elements at the beginning.
             //"Lists" are flexible for length but Arrays are not

             //Lists are for storing multiple data in the same data type
             //Lists store non-primitive data types, Arrays cannot
             //Lists cannot store primitive data types.
             //Lists have many useful methods, Arrays do not

             //Arrays are so fast
             //Arrays uses memory so less
             /*
             ArrayListler aynı data tipine sahip birden fazla data'yı depolamak icin kullanılır.
            INTERWİEV:!!! Array ile ArrayListlerin farkı nedir?
             1- Array olustururken Array'in icine kac tane elemen koymamız gerektigini söylemeliyiz,
             söyledigimiz elemen sayısından fazla eleman koyamayız.
             Arrayler eleman sayısında "fixed"dirler.

             ArrayListler olustururken element sayısını söylemeye gerek yok,cunku ArrayListler element sayısında "flexible"dirler.

             2-Array'lerin icine primitive ve referance'lar konulabilir.
             ArrayListler icine ise sadece "non-primitive"ler konulur, primitive ler ile calısmaz.

             3- Arraylar yapıları basit oldugu icin super fast, cok hızlı. Array'ler memory'i cok az kullanılır.

             4-Arraylerde method daha az. ArrayListlerde method daha fazladır,daha gelismis bir yapısı vardır.

             note: Eleman sayısı kesin belli olan dataları depolamak icin Array kullanılır,
                   ama eleman sayısı degisken olan coklu datalar icin Array kullanma riskini almayın.ArrayList kullanın.
              */


13-)            **How to create a List(Arraylist)**
             //1.Way:
             ArrayList<Integer> myList1 = new ArrayList<Integer>();
             //2.Way:
             ArrayList<Integer> myList2 = new ArrayList<>();
             //3.Way:
             List<Integer> myList3 = new ArrayList<>();

             **How to print a list on the console**
              System.out.println(myList3);// []

14-) NOTE:iki arrayList'in esit olabilmesi icin ilk önce eleman sayılarını esit olup olmadıgını kontrol etmeliyz,
          elemanlar esit olmalı ve aynı elemenlar aynı index'te olmalı
          örnegin "m" ve "n" adında iki list'imiz var ;

                      if (m.size()!=n.size()){
                          System.out.println("The lists are not same");
                          break;

                      }



  15-)     "PassByValue"  ==> day17listpassbyvalue pacgate'nin icinde

               1) When you use a variable inside a method, Java creates the copy of the variable
                  and uses it inside the method. Java does that to protect the original value of the variables.
                  If in every method usage, the value changes, it creates very big problems.
                  --
                  1) Bir method içinde bir variable kullandığınızda, Java değişkenin(variable) kopyasını oluşturur ve onu
                   method'un içinde kullanır. Java, variable'ın orijinal değerini korumak için bunu yapar. Buna "Pass by value-Değere göre geçiş" denir
                   Her metot kullanımında değer değişirse çok büyük sorunlar yaratır.

              2) Some programming languages do not use "Pass by value" they use "Pass by reference".
                 If you use "Pass by reference" original will change in every method usage.
                 --
                 2) Bazı programlama dilleri orjinal degeri koruma altına almamıstır, Bu isi developer'lara bırakmıstır.
                     Yani bazı programlama dilleri "Pass by value" kullanmaz, "Pass by reference" kullanırlar.
                     "Referansa göre geçir" kullanırsanız, orijinal her yöntem kullanımında değişecektir.

             3) If you insist on changing the original value in Java you can do it as well.
                Assign the updated value to the original variable then original value will be updated.
                --
                3) Java'daki orijinal değeri değiştirmekte ısrar ediyorsanız, bunu da yapabilirsiniz.
                          Güncellenen değeri orijinal değişkene atayın, ardından orijinal değer güncellenecektir.


 16-)   "Post Decrement-Increment"  and  "Pre Decrement-Increment"

             int a = 12;
             int b = a++; //Post Increment => variable'ı aldıktan sonra artırma yapar
             System.out.println(b); //12 => java önce "a"ı gördi ve aldı "b"nın icine koydu sonrada ++ isaretini gördü ve "a"ı alıp 1 artırdı.
             System.out.println(a); //13

             int x=15;
             int y=x--; //Post Decrement
             System.out.println(x); //14
             System.out.println(y);//15

             int m = 21;
             int n= ++m; // Pre Icrement => java önce "m"i artırdı sonra "n"nin icine koydu.
             System.out.println(m); //22
             System.out.println(n); //22

             int t = 32;
             int u = --t; //Pre Decrement
             System.out.println(t); //31
             System.out.println(u); //31

  17-)    "Varargs"
              1)If you want to make number of parameters flexible in a method, use "varargs"
              2)To create a varargs "Data Type + ... + space + a name for the varargs"
              3)"Varargs" use Arrays behind. When you work with varargs you may think you are working with Arrays.
              4)"Varargs" can accept zero or more elements
            ınt q1==> 5)Can I use another regular parameter after "varargs"?
                No, because "varargs" cannot be made full, second parameter will be unreachable, it will give error.
                "varargs" must be last parameter everytime.

             ınt q2==> 6)Can I use another regular parameter before "varargs"?
                Yes, you can use many regular parameters before "varargs"

            intq3==> 7)Can I use multiple "varargs" parameter in a method?
                   No.Because once we type varargs as first parameter then we cannot add other parameters after varargs...

             "varargs" : variable argument

          public static void main(String[] args) {

              System.out.println(add(3,5)); //8
              System.out.println(add(3,5,2)); //10
              System.out.println(add()); //0
              System.out.println(add(3)); //3
          }

          // Create a method adds two integers ( sade ce 2 tane sayı degil, istedigim kadar sayıyı toplayabilirim.
          public static int add(int... a){

              int sum =0;

              for (int w : a){  //varags'ların arkasında arrays calısır, o nedenle for each kullanıyoruz.

                  sum = sum + w;
              }
              return sum;
          }

  18-)      MethodOverlooding

            overlooding = asırı yükleme

            Bir method aynı isim ile farklı parametrelere sahip birden fazla method olusturmaktır.
             Method Overlooding nasıl yapılır?

             1-Method isimleri aynı olmalıdır
             2- Method parametreleri aynı olmalıdır
                i- Parametre sayıları degistirilebilir
                ii- Parametrelerin data tiplerini degistirilebilir
                iii-Parametrelerin yerlerini degistirilebilir ancak data tipleri farklı ise.
             3-Method ismi+ Parametreler = Method Signnature
             not:Method Signnature dısında ne degistirirseniz degistirin Java o methodları farklı kabul etmez.



            public static void main(String[] args) {

                add(3,5);
                add(3, 5.0);

            }

            public static void add(int a, int b){
                System.out.println(a+b);
            }

            public static void add(int a, int b, int c){
                System.out.println(a);
            }

            public static void add(double a, int b){
                System.out.println(a+b);
            }

            public static void add(int a, double b){
                System.out.println(a);
            }
        }


   19-)  StringBuilder "day19stringbuilder"ın icinde
               //What is "StringBuilder Class"?
                //"StringBuilder Class" is for creating "Mutable Strings"

                //We use "String Class" to create a String, why or when we will need "StringBuilder Class"?
                //String Class is "Immutable", "StringBuilder Class" is "Mutable".

                // "Immutable" : degismeyen,, duragan
                // "Mutable" : degisime acık

             //How to create a StringBuilder Object
             //1.Way:
             StringBuilder sb1 = new StringBuilder("Mary");
             System.out.println(sb1);//Mary

             sb1.append("Karl");
             System.out.println(sb1);//MaryKarl

             //2.Way:
             StringBuilder sb2 = new StringBuilder();
             System.out.println(sb2);//Empty

             sb2.append("Clara ");
             System.out.println(sb2);//Clara

             sb2.append("Ocean ");
             System.out.println(sb2);//ClaraOcean
not: degerleri append() (concent gibi) methodu ile tek tek ekleyebiliriz VEYA coklu ekleme yapabiliriz:
             ör:sb2.append("Miami ").append("FL ").append("USA");
             System.out.println(sb2); //ClaraOceanMiamiFLUSA


